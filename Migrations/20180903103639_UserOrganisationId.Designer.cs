// <auto-generated />
using LeadGeneration.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LeadGeneration.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180903103639_UserOrganisationId")]
    partial class UserOrganisationId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LeadGeneration.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("OrganisationId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganisationId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("LeadGeneration.Models.Campaign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignContentId");

                    b.Property<int>("CampaignSettingsId");

                    b.Property<string>("Name");

                    b.Property<int>("OrganisationId");

                    b.Property<string>("Slug");

                    b.HasKey("Id");

                    b.HasIndex("CampaignContentId");

                    b.HasIndex("CampaignSettingsId");

                    b.HasIndex("OrganisationId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundImage");

                    b.Property<string>("FooterText");

                    b.Property<int>("SignUpPageId");

                    b.Property<int>("SocialContentId");

                    b.Property<int>("StatusPageId");

                    b.Property<int>("TermsAndConditionsId");

                    b.HasKey("Id");

                    b.HasIndex("SignUpPageId");

                    b.HasIndex("SocialContentId");

                    b.HasIndex("StatusPageId");

                    b.HasIndex("TermsAndConditionsId");

                    b.ToTable("CampaignContent");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignContentSignUp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FooterImage");

                    b.Property<string>("HeaderImage");

                    b.Property<string>("MainText");

                    b.Property<string>("SecondaryText");

                    b.HasKey("Id");

                    b.ToTable("CampaignContentSignUp");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignContentSocial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacebookDescription");

                    b.Property<string>("FacebookImage");

                    b.Property<string>("FacebookTitle");

                    b.Property<string>("TwitterMessage");

                    b.HasKey("Id");

                    b.ToTable("CampaignContentSocial");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignContentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FooterImage");

                    b.Property<string>("HeaderImage");

                    b.Property<string>("MainText");

                    b.Property<string>("SecondaryText");

                    b.HasKey("Id");

                    b.ToTable("CampaignContentStatus");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignContentTermsAndConditions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("CampaignContentTermsAndConditions");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignEmailReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignLeadId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Surname");

                    b.HasKey("Id");

                    b.HasIndex("CampaignLeadId");

                    b.ToTable("CampaignEmailReferral");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignLead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CampaignId");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<int?>("ReferralId");

                    b.Property<string>("Surname");

                    b.Property<string>("UtmCampaign");

                    b.Property<string>("UtmMedium");

                    b.Property<string>("UtmSource");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignLeads");
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CampaignEndDate");

                    b.Property<DateTime>("CampaignStartDate");

                    b.Property<string>("LeadSubjectLine");

                    b.Property<string>("MandrillLeadTemplate");

                    b.Property<string>("MandrillReferralTemplate");

                    b.Property<string>("ReferralSubjectLine");

                    b.HasKey("Id");

                    b.ToTable("CampaignSettings");
                });

            modelBuilder.Entity("LeadGeneration.Models.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("OrganisationGeneralSettingsId");

                    b.Property<int>("OrganisationMandrillSettingsId");

                    b.Property<int>("OrganisationSocialSettingsId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationGeneralSettingsId");

                    b.HasIndex("OrganisationMandrillSettingsId");

                    b.HasIndex("OrganisationSocialSettingsId");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("LeadGeneration.Models.OrganisationGeneralSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GoogleTagManagerId");

                    b.Property<string>("WebsiteBaseUrl");

                    b.HasKey("Id");

                    b.ToTable("OrganisationGeneralSettings");
                });

            modelBuilder.Entity("LeadGeneration.Models.OrganisationMandrillSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApiKey");

                    b.Property<string>("FromEmail");

                    b.HasKey("Id");

                    b.ToTable("OrganisationMandrillSettings");
                });

            modelBuilder.Entity("LeadGeneration.Models.OrganisationSocialSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacebookId");

                    b.HasKey("Id");

                    b.ToTable("OrganisationSocialSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("LeadGeneration.Models.ApplicationUser", b =>
                {
                    b.HasOne("LeadGeneration.Models.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LeadGeneration.Models.Campaign", b =>
                {
                    b.HasOne("LeadGeneration.Models.CampaignContent", "CampaignContent")
                        .WithMany()
                        .HasForeignKey("CampaignContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.CampaignSettings", "CampaignSettings")
                        .WithMany()
                        .HasForeignKey("CampaignSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.Organisation", "Organisation")
                        .WithMany("Campaigns")
                        .HasForeignKey("OrganisationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignContent", b =>
                {
                    b.HasOne("LeadGeneration.Models.CampaignContentSignUp", "SignUpPage")
                        .WithMany()
                        .HasForeignKey("SignUpPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.CampaignContentSocial", "SocialContent")
                        .WithMany()
                        .HasForeignKey("SocialContentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.CampaignContentStatus", "StatusPage")
                        .WithMany()
                        .HasForeignKey("StatusPageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.CampaignContentTermsAndConditions", "TermsAndConditions")
                        .WithMany()
                        .HasForeignKey("TermsAndConditionsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignEmailReferral", b =>
                {
                    b.HasOne("LeadGeneration.Models.CampaignLead", "CampaignLead")
                        .WithMany("EmailReferrals")
                        .HasForeignKey("CampaignLeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LeadGeneration.Models.CampaignLead", b =>
                {
                    b.HasOne("LeadGeneration.Models.Campaign", "Campaign")
                        .WithMany("Leads")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LeadGeneration.Models.Organisation", b =>
                {
                    b.HasOne("LeadGeneration.Models.OrganisationGeneralSettings", "OrganisationGeneralSettings")
                        .WithMany()
                        .HasForeignKey("OrganisationGeneralSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.OrganisationMandrillSettings", "OrganisationMandrillSettings")
                        .WithMany()
                        .HasForeignKey("OrganisationMandrillSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.OrganisationSocialSettings", "OrganisationSocialSettings")
                        .WithMany()
                        .HasForeignKey("OrganisationSocialSettingsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LeadGeneration.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LeadGeneration.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("LeadGeneration.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LeadGeneration.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
